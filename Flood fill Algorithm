Flood fill Algorithm


C++ Code
----------------------------------

class Solution {
public:
typedef pair<int,int> ii;
    vector<int> cr={0,0,1,-1};
    vector<int> cc={1,-1,0,0};
    bool check(int x, int y, int m, int n)
    {
        if(x<0||y<0||x>=m||y>=n)
            return 0;
        return 1;
    }
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newColor) 
    {
        int m=image.size(),n=image[0].size(),oldColor, x,y,k;
        oldColor = image[sr][sc];
        
        queue<ii> level;
        image[sr][sc]=newColor;
        vector<vector<bool>>visited(m,vector<bool>(n,0));
        level.push({sr,sc});
        visited[sr][sc]=1;
        while(!level.empty())
        {
            auto top = level.front();
            level.pop();
            for(k=0;k<4;k++)
            {
                x = top.first+cr[k];
                y = top.second+cc[k];
                if(check(x,y,m,n) && image[x][y]==oldColor && !visited[x][y])
                {
                    image[x][y]=newColor;
                    level.push({x,y});
                    visited[x][y]=1;
                }
            }
        }
        return image;
    }
};

//{ Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int n, m;
		cin >> n >> m;
		vector<vector<int>>image(n, vector<int>(m,0));
		for(int i = 0; i < n; i++){
			for(int j = 0; j < m; j++)
				cin >> image[i][j];
		}
		int sr, sc, newColor;
		cin >> sr >> sc >> newColor;
		Solution obj;
		vector<vector<int>> ans = obj.floodFill(image, sr, sc, newColor);
		for(auto i: ans){
			for(auto j: i)
				cout << j << " ";
			cout << "\n";
		}
	}
	return 0;
}
